#
# Copyright 2016 The OpenDCT Authors. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#===================================================================================================
# DO NOT EDIT THIS FILE. IT WILL BE OVERWRITTEN ON UPGRADE.
# If you want to make your own changes, make a copy of this file and edit the copy.
#===================================================================================================

# OpenDCT Live Transcoding for Music Choice Only

# Set this to true to always reload these properties when this transcoding profile is requested.
# Alternatively these properties are only loaded once.
g.conf.always_reload=false

# This is the profile name to be displayed. When referencing this profile in opendct.properties, use
# the name of this file without the .properties extension.
g.conf.friendly_name=Music Choice Only
g.conf.description=Transcoding profile that tries to only transcode Music Choice channels.

# Change this value to true to disable transcoding on all capture devices using this profile. This
# effectively will cause all video streams to be copied instead.
g.conf.disable=false

# If this is set, transcoding can only happen when the video equals this height.
v.conf.t.allow_eq_h=480

# If this is set, transcoding can only happen when the video equals this width.
v.conf.t.allow_eq_w=704

# If this is true, transcoding will only happen if the content is interlaced.
v.conf.t.deinterlace_only=false

# If this is true, transcoding will only happen if the content is progressive.
v.conf.t.progressive_only=true

# If this is false, all content will be assumed progressive. The deinterlace_only option must be set
# false if this options is set false or no transcoding will happen. Interlaced content can still be
# detected by filters, but progressive_filter will always be selected.
v.conf.t.deinterlace_detect=true

# If this is true, transcoding will always happen even if the program is transcoding to the exact
# same format.
v.conf.t.always=false

# This is the default video codec to be used for all video encoding. Note that the encoder is
# referred to as 'libx264' when it is retrieved by name because that is how FFmpeg names to the
# codec. However, settings are referred to as 'h264' because that is what the codec returns as its
# name.
v.conf.e.default.codec=libx264

# A codec can be mapped to another codec so that if for example you want all mpeg2video to be
# converted to H.264, you can uncomment the line below. When this option is defined, transcoding
# will happen regardless of other options whenever the video format is in this example mpeg2video.
#v.conf.t.codec_map.mpeg2video=libx264

# A codec can be transcoded to a preferred codec. QuickSync is not available yet, but this is
# how you would tell the program to use the alternate codec. 'd' is decoding. 'e' is encoding.
#v.conf.d.codec_map.h264=qsvenc_h264
#v.conf.e.codec_map.h264=qsvenc_h264

#===================================================================================================
# These are the default options for encoding to h264. dict.values are codec specific options.
# These options are not checked for sanity.
#===================================================================================================
# Change this to baseline and the level to 3.1 if you're having problems with playback.
v.e.default.h264.dict.profile=high

# Occasionally 4.2 level content will not play on the HD300 extender.
v.e.default.h264.dict.level=4.1

# Allowed: ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow, placebo
v.e.default.h264.dict.preset=ultrafast

# Allowed: film, animation, grain, stillimage, psnr, ssim, fastdecode, zerolatency
# fastdecode and zerolatency are recommended for smoother transitions during SWITCH.
v.e.default.h264.dict.tune=fastdecode,zerolatency

# 23 is the h264 default. Increase this number for speed (max 51). Decrease it for quality (min 0).
v.e.default.h264.dict.crf=18

# Use this instead of crf for lossless compression. The profile also needs to be changed to high444.
#v.e.default.h264.dict.qp=0

# The following setting must be set or the ultrafast, faster and fast presets will fail to open the
# codec.
v.e.default.h264.dict.qcomp=0.60

# Average bitrate.
v.e.default.bit_rate=3200000

# The following 4 settings must be set or the h264 codec will complain.
v.e.default.h264.me_cmp=1
v.e.default.h264.me_range=16
v.e.default.h264.qmin=0
v.e.default.h264.qmax=69

# This how special parameters are passed to libx264. This one enforces a constant framerate. Check
# https://ffmpeg.org/doxygen/2.8/libx264_8c_source.html#l00816 for other dictionary options.
v.e.default.h264.dict.x264-params=force-cfr=1

# Two threads is more than enough for one transcoding. Reasons to not use more threads:
# 1) If more than one transcoding is being performed at the same time, the CPU cache hits will
# decrease as all of the cores are intensely working simultaneously on very different content.
# 2) The more cores involved, the longer it actually takes before the first frame is written and
# for the last frame to be written.
# 3) The decoding and filtering are all currently done on one thread and will potentially limit the
# scalability.
v.e.default.h264.dict.threads=2
v.e.default.h264.dict.lookahead_threads=1
v.e.default.h264.dict.sliced_threads=0

#===================================================================================================
# These are all of the settings available. The value here is not necessarily the default. You may
# need to refer to AVCodecContext to figure out if you really want to configure them or not. Not all
# codecs will do anything with these settings. The description is from FFmpeg doxygen. If you see
# an AVCodecContext variable missing that you would like to be able to set, ask for it to be added.
#===================================================================================================
# Maximum bitrate.
#v.e.default.h264.rc_max_rate=3200000

# Minimum bitrate.
#v.e.default.h264.rc_min_rate=3200000

# Motion estimation comparison function.
#v.e.default.h264.me_cmp

# Maximum motion estimation search range in subpel units If 0 then no limit.
#v.e.default.h264.me_range

# Minimum quantizer.
#v.e.default.h264.qmin

# Maximum quantizer.
#v.e.default.h264.qmax

# The number of pictures in a group of pictures, or 0 for intra_only.
#v.e.default.h264.gop_size

# Trellis RD quantization.
#v.e.default.h264.trellis

# Maximum number of B-frames between non-B-frames Note: The output will be delayed by max_b_frames+1
# relative to the input.
#v.e.default.h264.max_b_frames

#===================================================================================================
# These are the default filter graph options for encoding to h264.
#===================================================================================================
# This filter is used if the content is determined to be interlaced. Since frame doubling is
# enabled, every frame must be deinterlaced or the video might have a variable frame rate. Special
# characters such as backslash (\) must be escaped (\\) in this file. opendct_dfps gets converted to
# double the input source framerate. This "hack" is needed or the output file will report that the
# stream is quadruple the original frame rate due to the input time base code. It is more efficient
# to let the filter graph handle this than to code the scaling on the Java side.
v.e.default.h264.deinterlace_filter=yadif=mode=2, mcdeint=mode=fast, scale=w='trunc(oh*a/16)*16':h='min(720\\,ih)':interl=0:flags=bilinear, format=pix_fmts=yuv420p, fps=fps=opendct_fps:round=near

# This filer is used if the content is determined to be progressive. opendct_fps gets converted to
# the input source framerate. This "hack" is needed or the output file may report that the stream is
# quadruple the original frame rate due to the input time base code. It is more efficient to let the
# filter graph handle this than to code the scaling on the Java side.
v.e.default.h264.progressive_filter=scale=w='trunc(oh*a/16)*16':h='min(720\\,ih)':interl=0:flags=bilinear, format=pix_fmts=yuv420p, fps=fps=opendct_fps:round=near

# This filter is used for any 720p content. 'default' is an alias for 'w*.h*' The left to right most
# specific setting always wins if there is a conflict.
# Ex. w1280.h720 > w1280.h* > w*.h720
v.e.w1280.h720.h264.progressive_filter=format=pix_fmts=yuv420p, fps=fps=opendct_fps:round=near

# This filter disables frame doubling for 1080i content so only 29.97 FPS needs to be processed.
v.e.w1920.h1080.h264.deinterlace_filter=yadif=mode=0, scale=w='trunc(oh*a/16)*16':h='min(720\\,ih)':interl=0:flags=bilinear, format=pix_fmts=yuv420p, fps=fps=opendct_fps:round=near

#===================================================================================================
# These are the weights for encoding.
#===================================================================================================

# All h264 video has a weight of 2 by default. If this value is not set, the program will set it for
# you with a warning in the logs.
v.e.default.h264.encode_weight=2

# All incoming video with a height of 480 typically uses less than half of the resources needed for
# 1080p30 ot 720p60.
v.e.w*.h480.h264.encode_weight=1

# Music Choice is assumed to have nearly zero actual resource requirements.
v.e.w704.h480.h264.encode_weight=0